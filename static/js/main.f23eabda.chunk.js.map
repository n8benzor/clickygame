{"version":3,"sources":["components/NavMessage/index.js","components/Nav/index.js","components/Header/index.js","components/Container/index.js","components/ClickItem/index.js","components/Footer/index.js","components/Game/index.js","App.js","registerServiceWorker.js","index.js"],"names":["NavMessage","state","message","animating","renderMessage","prevState","score","topScore","newState","this","props","setState","className","onAnimationEnd","Component","Nav","href","Header","Container","children","ClickItem","role","aria-label","onClick","handleClick","id","style","backgroundImage","image","shake","Footer","alt","src","Game","data","handleCorrectGuess","newData","newScore","newTopScore","Math","max","shuffleData","handleIncorrectGuess","resetData","map","item","clicked","i","length","j","floor","random","temp","handleItemClick","guessedCorrectly","newItem","key","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f23eabda.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./style.css\";\n\n// NavMessage renders an li tag containing an message for the user\n\nclass NavMessage extends Component {\n  state = {\n    message: \"\",\n    animating: false\n  };\n\n  componentDidUpdate({ score, topScore }, prevState) {\n    const newState = { animating: true };\n\n    if (score === 0 && topScore === 0) {\n      newState.message = \"\";\n    } else if (score === 0 && topScore > 0) {\n      newState.message = \"incorrect\";\n    } else {\n      newState.message = \"correct\";\n    }\n\n    if (score !== this.props.score || this.state.message !== newState.message) {\n      this.setState(newState);\n    }\n  }\n\n  renderMessage = () => {\n    switch (this.state.message) {\n    case \"correct\":\n      return \"You guessed correctly!\";\n    case \"incorrect\":\n      return \"You guessed incorrectly!\";\n    default:\n      return \"Click an image to begin!\";\n    }\n  };\n\n  render() {\n    return (\n      <li\n        className={this.state.animating ? this.state.message : \"\"}\n        onAnimationEnd={() => this.setState({ animating: false })}\n      >\n        {this.renderMessage()}\n      </li>\n    );\n  }\n}\n\nexport default NavMessage;\n","import React from \"react\";\nimport NavMessage from \"../NavMessage\";\nimport \"./style.css\";\n\n// Component for the Navbar\n\nfunction Nav(props) {\n  return (\n    <nav className=\"navbar\">\n      <ul>\n        <li className=\"brand\">\n          <a href=\"/\">Clicky Game</a>\n        </li>\n        <NavMessage score={props.score} topScore={props.topScore} />\n        <li>\n          Score: {props.score} | Top Score: {props.topScore}\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Nav;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Header() {\n  return (\n    <header className=\"header\">\n      <h1>Clicky Game!</h1>\n      <h2>Click on an image to earn points, but don't click on any more than once!</h2>\n    </header>\n  );\n}\n\nexport default Header;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Container(props) {\n  return <main className=\"container\">{props.children}</main>;\n}\n\nexport default Container;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction ClickItem(props) {\n  return (\n    <div\n      role=\"img\"\n      aria-label=\"click item\"\n      onClick={() => props.handleClick(props.id)}\n      style={{ backgroundImage: `url(\"${props.image}\")` }}\n      className={`click-item${props.shake ? \" shake\" : \"\"}`}\n    />\n  );\n}\n\nexport default ClickItem;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Footer() {\n  return (\n    <footer className=\"footer\">\n      <div className=\"bottom\">\n        Clicky Game! <img alt=\"react\" src=\"assets/images/react.svg\" />\n      </div>\n    </footer>\n  );\n}\n\nexport default Footer;\n","import React, { Component } from \"react\";\nimport Nav from \"../Nav\";\nimport Header from \"../Header\";\nimport Container from \"../Container\";\nimport ClickItem from \"../ClickItem\";\nimport Footer from \"../Footer\";\nimport data from \"../../data.json\";\n\nclass Game extends Component {\n  state = {\n    data,\n    score: 0,\n    topScore: 0\n  };\n\n  componentDidMount() {\n    this.setState({ data: this.shuffleData(this.state.data) });\n  }\n\n  handleCorrectGuess = newData => {\n    const { topScore, score } = this.state;\n    const newScore = score + 1;\n    const newTopScore = Math.max(newScore, topScore);\n\n    this.setState({\n      data: this.shuffleData(newData),\n      score: newScore,\n      topScore: newTopScore\n    });\n  };\n\n  handleIncorrectGuess = data => {\n    this.setState({\n      data: this.resetData(data),\n      score: 0\n    });\n  };\n\n  resetData = data => {\n    const resetData = data.map(item => ({ ...item, clicked: false }));\n    return this.shuffleData(resetData);\n  };\n\n  shuffleData = data => {\n    let i = data.length - 1;\n    while (i > 0) {\n      const j = Math.floor(Math.random() * (i + 1));\n      const temp = data[i];\n      data[i] = data[j];\n      data[j] = temp;\n      i--;\n    }\n    return data;\n  };\n\n  handleItemClick = id => {\n    let guessedCorrectly = false;\n    const newData = this.state.data.map(item => {\n      const newItem = { ...item };\n      if (newItem.id === id) {\n        if (!newItem.clicked) {\n          newItem.clicked = true;\n          guessedCorrectly = true;\n        }\n      }\n      return newItem;\n    });\n    guessedCorrectly\n      ? this.handleCorrectGuess(newData)\n      : this.handleIncorrectGuess(newData);\n  };\n\n  render() {\n    return (\n      <div>\n        <Nav score={this.state.score} topScore={this.state.topScore} />\n        <Header />\n        <Container>\n          {this.state.data.map(item => (\n            <ClickItem\n              key={item.id}\n              id={item.id}\n              shake={!this.state.score && this.state.topScore}\n              handleClick={this.handleItemClick}\n              image={item.image}\n            />\n          ))}\n        </Container>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","import React from \"react\";\nimport Game from \"./components/Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}